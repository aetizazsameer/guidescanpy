configfile: "config.json"
threads: 1
# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
ORGANISMS = config["organisms"]
ENZYMES = ["cas9", "cpf1"]
OUTPUT_DIR = config['output_dir']

shell.executable("/bin/bash")

wildcard_constraints:
    organism = "|".join(ORGANISMS)

# Rules that should be run on the head node in a cluster environment
# These typically involve web access or one time installation steps
localrules:
    download_sequence,
    download_annotations,
    download_chr2acc
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Rules
# -----------------------------------------------------------------------------
rule all:
    input:
        bam_files = expand(f"{OUTPUT_DIR}/databases/{{enzyme}}/{{organism}}.bam.sorted", organism=ORGANISMS, enzyme=ENZYMES),
        add_organism = expand(f"{OUTPUT_DIR}/job_status/add_{{organism}}.txt", organism=ORGANISMS)


rule download_sequence:
    params:
        url = lambda wildcards: config[wildcards.organism]['fna'],
        fna_gz = lambda wildcards: f"{OUTPUT_DIR}/raw/{wildcards.organism}.fna.gz"
    output:
        f"{OUTPUT_DIR}/raw/{{organism}}.fna"
    shell: """
        wget -O {params.fna_gz} {params.url}
        gunzip -c {params.fna_gz} > {output}
        rm {params.fna_gz}
        """


rule download_annotations:
    params:
        url = lambda wildcards: config[wildcards.organism]['gtf']
    output:
        f"{OUTPUT_DIR}/raw/{{organism}}.gtf.gz"
    shell:
        "wget -O {output} {params.url}"


rule download_chr2acc:
    params:
        url = lambda wildcards: config[wildcards.organism]['chr2acc']
    output:
        f"{OUTPUT_DIR}/raw/{{organism}}_chr2acc"
    shell:
        "wget -O {output} {params.url}"


rule init_db:
    conda:
        "env.yaml"
    output:
         f"{OUTPUT_DIR}/job_status/init_db.txt"
    shell: """
        guidescanpy init-db
        touch {output}
        """


rule add_organism:
    conda:
        "env.yaml"
    input:
        gtf_gz_file = f"{OUTPUT_DIR}/raw/{{organism}}.gtf.gz",
        chr2acc_file = f"{OUTPUT_DIR}/raw/{{organism}}_chr2acc",
        init_db = f"{OUTPUT_DIR}/job_status/init_db.txt"
    output:
        f"{OUTPUT_DIR}/job_status/add_{{organism}}.txt"
    shell: """
        guidescanpy add-organism {wildcards.organism} {input.gtf_gz_file} {input.chr2acc_file}
        touch {output}
        """


rule guidescan_index:
    conda:
        "env.yaml"
    input:
        f"{OUTPUT_DIR}/raw/{{organism}}.fna"
    output:
        f"{OUTPUT_DIR}/indices/{{organism}}.index.gs"
    shell: """
        guidescan index {input} --index {OUTPUT_DIR}/indices/{wildcards.organism}.index
        """


rule generate_kmers:
    conda:
        "env.yaml"
    params:
        pam = lambda wildcards: config['pams'][wildcards.enzyme]
    input:
        f"{OUTPUT_DIR}/raw/{{organism}}.fna"
    output:
        f"{OUTPUT_DIR}/kmers/{{enzyme}}/{{organism}}.csv"
    shell: """
        guidescanpy generate-kmers {input} --pam {params.pam} --max-kmers 100 > {output}
        """


rule guidescan_enumerate:
    conda:
        "env.yaml"
    params:
        index_file = f"{OUTPUT_DIR}/indices/{{organism}}.index",
    input:
        kmers_file = f"{OUTPUT_DIR}/kmers/{{enzyme}}/{{organism}}.csv",
        index_gs = f"{OUTPUT_DIR}/indices/{{organism}}.index.gs"
    output:
        f"{OUTPUT_DIR}/databases/{{enzyme}}/{{organism}}.sam"
    shell: """
        guidescan enumerate {params.index_file} --kmers-file {input.kmers_file} --output {output} --format sam
        """


rule add_ce:
    conda:
        "rs2/env.yaml"
    input:
        sam_file = f"{OUTPUT_DIR}/databases/{{enzyme}}/{{organism}}.sam",
        fna_file = f"{OUTPUT_DIR}/raw/{{organism}}.fna"
    output:
        f"{OUTPUT_DIR}/databases/{{enzyme}}/{{organism}}.bam.sorted"
    shell: """
        python rs2/main.py {input.sam_file} {input.fna_file} {output}
        python -c "import pysam; pysam.sort('-o', '{output}', '{output}'); pysam.index('{output}')"
        """
# -----------------------------------------------------------------------------
